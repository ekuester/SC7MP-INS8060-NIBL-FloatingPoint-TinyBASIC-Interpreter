#!/usr/bin/env python3
# converts binary into include file for c program
# so one can compile it in e.g. into an emulator
# 11_bin2c.py

import binascii
import re, os, sys

def usage():
    print("converts binary into include file for c program,")
    print("so one can compile it in e.g. into an emulator")
    print("usage: ./bin2c.py [binary file] [bytes pro ine]")
    print("give binary without .bin extension")
    print("example: bin2c hello 8 > hello.h")
    print("strip first and last line in file by hand!")
    print("Erich KÃ¼ster July 2023")
    quit()

argc = len(sys.argv)
if argc == 1 or argc > 3:
    usage()
base = sys.argv[1]
if argc == 3:
    byte_count = int(sys.argv[2],10)
else:
    byte_count = 16
bin_file = base + ".bin"
file_stats = os.stat(bin_file)
file_size = file_stats.st_size
print(f'Will read file {bin_file} with {file_size} Bytes')
# read binary into bytearray
with open(bin_file, "rb") as bin_f:
    b_bytes = bytes(bin_f.read())
lines = []
# split into hex bytes each
# 16 hex bytes are a line
line = []
for i, byte in enumerate(b_bytes):
    if (i % byte_count) == 0 and i != 0:
        lines.append(line)
        line = []
    line.append(f"0x{byte:02X}")
# if some bytes are left
if line:
    lines.append(line)
print("/* Generated by bin2c, do not edit manually */")
print()
print(f"/* Contents of file {bin_file} */")
rom_name = base.upper()
print(f'#define rom_name "{rom_name}"')
print(f"const unsigned char rom_bin[{file_size}]"+" = {")
for line in lines[:-1]:
    print("    ",  end='')
    for byte in line:
        print(byte, end=', ')
    print()
# now print last line
print("    ",  end='')
for byte in lines[-1][:-1]:
    print(byte, end=', ')
print(lines[-1][-1], end='')
print()
print("};")
print("Done!")

